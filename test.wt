/*
 error propagation test

import 'std.errors'
import 'std.io'

fun a {
    return result.ok(10)
}

fun b {
    return result.err('error found')
}

fun c {
    a_val := a()?
    io.println('a: ' + a_val)
    b_val := b()?
    io.println('b: ' + b_val)
}

io.println(c().unwrap_err())
*/
/*
import 'std.io'
fun factorial(n) {
    f := 1
    r := 1
    while f <= n {
        r *= f
        f += 1
    }
    return r
}
io.println(factorial(15))
*/
/*
import 'std.io'
list := [1,3,5,7,'hello']
io.println(list.to_string())
*/
/*
import 'std.io'
a := 'abc'
b := 'bbc'
io.println(a < b)
*/
/*
import 'std.io'

trait Animal {
    fun pet
}

type Cat impl Animal {
    fun pet {
        io.println('Hello, world!')
    }
}

cat := new Cat()
if cat impls test:Animal {
    cat.pet()
}
*/
/*
import 'std.io'
import 'std.gc'
fun a {
    c := 3
    fun b {
        io.println(c)
    }
    return b
}
f := a()
f = null
gc.invoke()
*/
/*
import 'std.io'
list := [1,3,5,7,'hello']
list.add(9)
*/
/*
import 'std.io'
fun factorial(n) {
    f := 1
    r := 1
    while f <= n {
        r *= f
        f += 1
    }
    return r
}
io.println(factorial(15))
*/
import 'std.io'
import 'std.gc'
map := new Map()
map.set('banana', 14)
map.set('apple', 5)
map.set('plum', 7)
gc.invoke()
map.set('plum', 7)
io.println(map.to_string())
map.delete('plum')
io.println(map.to_string())